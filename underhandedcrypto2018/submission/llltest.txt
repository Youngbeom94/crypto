#Then you make a vector v = [e, -n, b^1, b^2, b^3, ...] until b^(i+1) is the size of k*m+1
#                                                                                 log(k, 2) + log(d, 2)
#                                                             log(b^(i+1), 2) = log(k, 2) + log(d, 2)
#LLL([
#    [1, 0, 0,    ,  e ]
#    [0, 1, 0, ..>, -n ]
#    [0, 0, 1,    , b^1]
#        .     .     .
#        .      .    .
#        V       _|  V
#})
#and try b = 2^512 (the size of d)
#One of the resulting rows from LLL should be of the form [d, m = (e * d - 1) / (n - k), ((k * m + 1))] (where the last value is split into words of size b each)(edited)
#So you immediately get d and then you can rearrange x = k*m + 1 into k = (x - 1) / m and recover k from the rest of the columns
    
d = 3994461588362605090304711370513667906630185206166198815517338184993968402984429201806923982524032932855536105501939485137962461981919639162628973339250539877L
n = 54362914515536248551422033447164538852075987429125827876200025660790024770919468999832901360477713537547981564151298560739776391568115138007722142370928048609863322126791570539225249473883480363192138495188804473647881883119586279667876365531265762557302895265165415322392565076898576260161485924186658038443060861597776797299764075243915708463962040416647336816253766766812104161149398756996346768913276793404123036522838341319604204242632821431020932689747767179254618551901103728481764603392370468719125552251455029917004490679783090709689573699363883064603411012833624591792761519795347754982143133135049337000177L
n_k = 54362914515536248551422033447164538852075987429125827876200025660790024770919468999832901360477713537547981564151298560739776391568115138007722142370928048609863322126791570539225249473883480363192138495188804473647881883119586279667876365531265762557302895265165415322392565076898576260161485924186658038443008287678229404435792761405731813557644914056167499610403813782031146166366887169008329945787134872874796434193373277865818828270180102819164512063939824887029203860562983462011224146038374654511674959752170934393675748203364519062701848109604938236375708644629512960507833186065619329630926290437654934186594L
k = n - n_k
e = 26534922670525082097535127555727465324043215751979342971360440983930655788764925647410873878360337562780841767057655592922989818857353361547724476047670117991370282701683213517603101499342421959056892889149159240954947797664967192146311437772194902271255907572503603081899548906939133837750219931900285533840383127807758645133938216888163156877007037092634171752945212940572593353488615271279693805235967248886799201622200557389000328568113911466663899384392096861787833640372269649335502850442330122833233502984715068114188403929201990304215670564555621008016057012877571262328589944264490528975008710387975972789065L

_vector = [e, -n]

b = 2 ** int(log(d, 2))
i = 1
bi = b ** i
max_bi_size = int(log(k, 2))
while True:
    assert log(bi, 2) < max_bi_size
    print("{} {}".format(log(bi, 2), max_bi_size))
    _vector.append(bi)
    i += 1
    bi = b ** i        
    #if log(b ** (i + 1), 2) > max_bi_size:
    if log(bi, 2) >= max_bi_size:
        #_vector.append(bi)
        break
        
lll_input = []
_vector_size = len(_vector)
for count in range(_vector_size):
    row = [1 if x == count else 0 for x in range(_vector_size)]
    row.append(_vector.pop(0))
    lll_input.append(row)

import pprint
print("Input matrix:")
pprint.pprint(lll_input)
lll_input = Matrix(lll_input)
#lll_input = lll_input.transpose()
print("Input Matrix object:")
pprint.pprint(lll_input)

output = lll_input.LLL()
print("Output matrix: ")
pprint.pprint(output)
for row in output:
    print d in row
    for item in row:
        if item and item % d == 0: print item
            
            