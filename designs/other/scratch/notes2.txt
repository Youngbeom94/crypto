# one advantage of a block cipher is state size: you can get away with an 80-128 bit block size
#   - you can also use less rounds then a hash
# a stream cipher should have a block size twice the key
#   - at least 80 bits of key material implies at least 160 bits of state
# a hash function needs 256+ bits of state and lots of rounds



iv = g
a = r1
b = r2
h_a = one_way_function(iv, a)
h_b = one_way_function(iv, b)
h_ab = one_way_function(h_b, a)
h_ab = one_way_function(h_a, b)

one way function such that h(h(iv, k1), h(iv, k2)) == h(h(iv, k2), h(iv, k1))
branch(m) ^ branch(k1)
branch(m) ^ branch(k2)


#h_1(m) || h_2(m) improves collision resistance
#h_2(h_1(m)) improves preimage resistance

#h_2(h_1(h_1(m) || h_2(m))) ?

# non-reversible cryptography will always be vulnerable to side channel analysis because of the information radiating in the form of heat when information is not preserved in the non-reversible circuit. Every non-reversibly evaluated xor gate leaks information in the form of heat.







cipher design strategies
First, you have to establish
"The simple" - RC4 like (shuffling huge array of words)

"The small" - 8-bit friendly/constrained device friendly.

"The fast" - salsa like (SIMD with big registers)



What is diffusion, anyways?
----
job of diffusion: spread inputs to many different s-boxes
    - how to maximize diffusion?
        - placing *every* term as input to *every* s-box is actually not ideal
            - this means that the outputs of every s-box will be identical
    - so what is the optimal maximum number of terms to appear in the given number of s-boxes?
        - need to take into account:
            - total number of terms: k
            - total number of s-box applications: n
        - ideally: 50% of the input bits should influence any given output bit
            - insert branch8 as example
            - ideally, the distribution of the input bits should be randomly distributed
            - so each input bit should appear as input to 1/2 of the total s-boxes
        - each term should appear in n/2 s-boxes
        - each s-box should have as input k/2 terms
    
    
            
So what is confusion? What even are s-boxes, anyways?
--------
An "s-box" is really a "non-linear function evaluator"
What is a non-linear function? 
    - TODO -------------------------------
    
Why do we require non-linear functions?
    - A linear equation is easily solved, given a few input output pairs
        - This applies even with an arbitrary number of rounds
        - insert shuffle-key-diffuse example
    - Non-linear equations are harder to work with, algebraically
    - We ultimately want a system of equations that is prohibitively complex, with many terms of high degree
         
"active s-boxes" = non-linear equations that are different, between two pairs of states
    - the "non-active" s-boxes have identical terms between the two pairs of states
worst case: no diffusion: AES with no mix columns; each 8-bit word is described by one distinct equation, with no other words mixed in
So "diffusion" revisited: spreading around inputs to different "non-linear function evaluators" (the "s-box" that is applied in parallel on the state)

what degree is sufficient? How non-linear does it need to be?

 1 -> 2 = 3
 2 -> 4 = 6 = 9
 4 -> 8 = 12 = 21
 8 -> 16 = 24 = 45
 16 -> 32 = 48 = 93
 32 -> 64 = 96 = 189
 64 -> 128 = 192 = 381
 
 
 
            
# 0 1 2 3 # a ^= rotate_left(a, 1)
# 1 2 3 0
# 01 12 23 03 # good - each bit appears in 2 places

# 01 12 23 03  # 1 and 1
# 12 23 03 01 
# 02 13 02 13 # not good - repetitive patterns


# 01 12 23 03 # 1 and 2
# 23 03 01 12 
# 0123 0123 0123 # not good - all identical


# 01 12 23 03 # 1 and 3
# 03 01 12 23
# 13 02 13 02 # still not good


 
# 0 1 2 3 # a ^= rotate_left(a, 2)
# 2 3 0 1
# 02 13 02 13


# 0 1 2 3 # a ^= rotate_left(a, 3)
# 3 0 1 2
# 03 01 12 23


# for a function: 50% is ideal


# for a permutation:

# 0 1   # a ^= b
# 2 3
# 02 13

#  3  2     # b ^= rotate_left(a, 1)
# 02 13 
# 023 123

# 02 13
# 023 123





# 02 13
# 2 3

# 01 23




# error correcting code based diffusion test?
# establish an 8-1-d code for the linear layer
# > d == better diffusion

# bivs diffusion test :)


           
            
- the constants should come before the non-linear function
    - makes s-box inputs independent
        - only makes s-box *outputs* independent if the constant is xor'd in after the s-box
    - constants do not increase algebraic degree if they are xor'd in *after* the non-linear function is applied

- the constants should be derived by applying the linear diffusing function to a unique sequence of values
    - one, consistent way to implement constants can alleviate suspicions as to the origins of the constants
    - simplifies implementation, and potentially shrinks code size if an additional constant derivation function was required

- the constants should be applied before the linear function (assuming constants are derived as above)
    - because of linearity, L(message + constant) == L(message) + L(constant)
    - generates "good" constants (high hamming distance) 
    - costs no extra processing time
    - unclear whether or not constants benefit from "confusion" or higher algebraic degree (there is no clear need to apply the non-linear function to constants)
    
- constants serve multiple purposes:
    - some attacks (i.e. slide attacks) exploit the fact that identical functions are used every round
        - adding a new constant before the s-box application every round makes each round act differently
    - constants also break rotational symmetry that would otherwise be present in a bit-sliced design
        - can also break rotational symmetry by using shifts and not just rotations
    - LED uses the addition of constants to simulate independent round keys https://eprint.iacr.org/2012/600.pdf
  
- the linear function should:
    - maximize the number of active s-boxes        
    - ensure an even and optimal distribution of terms (bits)
        
- the non-linear function should be a bit sliced s-box
    - timing attack resistant/constant time operation
    - total transparency
        - algebraic structure is present for anyone to scrutinize
    - very helpful resource: Finding Optimal Bit-sliced Representations of 4x4 S-Boxes
    - very scalable:
        - 4 bit s-box on four 8-bit wide words? X instructions per 32 bits of data
        - 4 bit s-box on 4 32-bit wide words? X instructions per 128 bits of data
        - 4 bit s-box on 4 4x32-bit words via SIMD? X instructions per 512 bits of data    
    - wider words = more active s-boxes
        - 4 32-bit words? 32 s-box applications
        - 4 64-bit words? 64 s-box applications
        - Assuming the linear function provides full diffusion:
          - 4 32-bit words: > 25 active s-boxes (measured via urandom and good diffusing function)
              - after 2 rounds: 25 ** 2: 625
          - 4 64-bit words: > 50 active s-boxes
              - after 2 rounds: 50 ** 2: 2500
          - 16 8-bit words: max: 16 active s-boxes
          
- (Ciphers) the key addition should come before the linear function
    - linear(m ^ k) diffuses k as well as m;
    - linear(m) ^ k does not diffuse k
    
According to these criteria, the optimal order of operations is: add constant, (optional) add key, linear diffusion layer, non-linear s-box layer   


            